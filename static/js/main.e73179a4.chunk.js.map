{"version":3,"sources":["img/github.png","components/RepoUnit.jsx","components/SearchBar.jsx","components/RepoSearchPage.jsx","components/FavoritsRepos.jsx","components/MainApp.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","RepoUnit","props","saveRepo","axios","defaults","withCredentials","get","params","Name","state","Avatar","then","result","console","log","setState","btnClass","catch","err","btnSave","this","name","avatar","showSave","Fragment","className","src","round","size","Button","color","onClick","Component","SearchBar","onSearchInput","currentText","searchText","currentTarget","value","keyPress","e","keyCode","onSearchRepo","headers","Accept","method","response","repos","data","items","type","placeholder","onChange","onKeyDown","map","item","i","full_name","owner","avatar_url","key","addToRepos","RepoSearchPage","FavoritsRepos","oninit","MainApp","hideSearch","searchBarClass","Navbar","bg","expand","Brand","Gitlogo","alt","Toggle","aria-controls","Collapse","id","Nav","Link","href","path","render","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e73179a4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github.2b650681.png\";","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Button } from \"reactstrap\";\r\nimport Avatar from \"react-avatar\";\r\n\r\n/**\r\n  The repository unit represent unit of the git repo shown in the search result.\r\n  the unit include the avatar of the user own the repo, the name of the repo and save btn.\r\n\r\n */\r\nclass RepoUnit extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      Name: \"\", // The name of the repository\r\n      Avatar: \"\", //The avatar picture of the repository user\r\n      btnClass: \"con-unit-rep\", //the class of the repo unit. will change on select in order to hide the element when repo saved to vaforits\r\n      btnSave:\r\n        \"item save-btn\" /* the class of the save btn. will change on select in order to be shown or hide depending on the page: \r\n                                    Home page : when shown as a list of result the btn will appear as option of the repo unit \r\n                                    Favorit page : the btn will be disappear */\r\n    };\r\n  }\r\n\r\n  /*\r\n    Life hook - before the component mount get, get the name and the avatar of the repo unit/\r\n   */\r\n  componentWillMount() {\r\n    this.setState({ Name: this.props.name });\r\n    this.setState({ Avatar: this.props.avatar });\r\n    //in case the user saved the repository unit, the unit will disappear from the list of repositories.\r\n    if (this.props.showSave) {\r\n      this.setState({ btnSave: \"item save-btn\" });\r\n    } else {\r\n      this.setState({ btnSave: \"item save-btn save-btn-hide\" });\r\n    }\r\n  }\r\n  /*\r\n    Save the repository in favorits\r\n    get request to save the repositories in favorits list, using ASP session on server side\r\n    result -> list of the favorits repos from the session.\r\n   */\r\n  saveRepo = () => {\r\n    axios.defaults.withCredentials = true;\r\n\r\n    axios\r\n      .get(\"https://localhost:44384/Home/SaveRepositories\", {\r\n        params: {\r\n          Name: this.state.Name,\r\n          Avatar: this.state.Avatar\r\n        }\r\n      })\r\n      .then(result => {\r\n        console.log(result);\r\n        this.setState({ btnClass: \"con-unit-rep-hide\" });\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className={this.state.btnClass}>\r\n          <div className=\"repo-unit container\">\r\n            <Avatar\r\n              className=\"item\"\r\n              name={this.props.name}\r\n              src={this.props.avatar}\r\n              round={true}\r\n              size=\"50\"\r\n            />\r\n            <div className=\"item repo-name\">{this.props.name}</div>\r\n            <Button\r\n              className={this.state.btnSave}\r\n              color=\"primary\"\r\n              onClick={this.saveRepo}\r\n            >\r\n              Save Repository\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RepoUnit;\r\n","import React, { Component } from \"react\";\r\nimport RepoUnit from \"./RepoUnit.jsx\";\r\nimport axios from \"axios\";\r\n\r\nclass SearchBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchText: \"\", //user search input val\r\n      repos: [] //repositories respond from git api\r\n    };\r\n  }\r\n  /*\r\n  Gets the input from the search bar\r\n*/\r\n  onSearchInput = currentText => {\r\n    this.setState({ searchText: currentText.currentTarget.value });\r\n  };\r\n\r\n  /*\r\n    Gets the enter key press for the search bar. \r\n  */\r\n  keyPress = e => {\r\n    if (e.keyCode == 13) {\r\n      this.onSearchRepo();\r\n    }\r\n  };\r\n\r\n  /*\r\n    api get request to git api\r\n    response : git repositories from the api.\r\n\r\n  */\r\n  onSearchRepo = () => {\r\n    axios\r\n      .get(\r\n        \"https://api.github.com/search/repositories?q=\" + this.state.searchText,\r\n        {\r\n          headers: {\r\n            Accept: \"application/json\"\r\n          },\r\n          method: \"GET\"\r\n        }\r\n      )\r\n      .then(response => {\r\n        this.setState({ repos: response.data.items });\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {/* Search Bar */}\r\n        <div className=\"d-flex justify-content-center h-100 search-b\">\r\n          <div className=\"searchbar\">\r\n            <input\r\n              className=\"search_input\"\r\n              type=\"text\"\r\n              name=\"\"\r\n              placeholder=\"Search git repo...\"\r\n              onChange={this.onSearchInput}\r\n              onKeyDown={this.keyPress}\r\n            ></input>\r\n            <a onClick={this.onSearchRepo} className=\"search_icon\">\r\n              <i className=\"fas fa-search\"></i>\r\n            </a>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          {/* Git Repositories */}\r\n          {this.state.repos.map((item, i) => {\r\n            return (\r\n              <RepoUnit\r\n                name={item.full_name}\r\n                avatar={item.owner.avatar_url}\r\n                key={i}\r\n                repos={this.addToRepos}\r\n                showSave={true}\r\n              ></RepoUnit>\r\n            );\r\n          })}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, { Component } from \"react\";\r\nimport SearchBar from \"./SearchBar.jsx\";\r\n\r\nclass RepoSearchPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <SearchBar />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RepoSearchPage;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport RepoUnit from \"./RepoUnit.jsx\";\r\n\r\nclass FavoritsRepos extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      repos: []\r\n    };\r\n  }\r\n  componentWillMount() {\r\n    this.props.oninit();\r\n\r\n    axios.defaults.withCredentials = true;\r\n\r\n    axios\r\n      .get(\"https://localhost:44384/Home/GetFavoritsRepositories\", {\r\n        params: {\r\n          Name: this.state.Name,\r\n          Avatar: this.state.Avatar\r\n        }\r\n      })\r\n      .then(result => {\r\n        console.log(result);\r\n        this.setState({ repos: result.data });\r\n      })\r\n      .catch(err => {\r\n        // Do somthing\r\n      });\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div>\r\n          {this.state.repos.map((item, i) => {\r\n            return (\r\n              <RepoUnit\r\n                name={item.Name}\r\n                avatar={item.Avatar}\r\n                key={i}\r\n                repos={this.addToRepos}\r\n                showSave={false}\r\n              ></RepoUnit>\r\n            );\r\n          })}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FavoritsRepos;\r\n","import React, { Component } from \"react\";\r\nimport Route from \"react-router-dom/Route\";\r\nimport Gitlogo from \"../img/github.png\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport RepoSearchPage from \"./RepoSearchPage.jsx\";\r\nimport FavoririteRepos from \"./FavoritsRepos.jsx\";\r\n\r\nclass MainApp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchBarClass: \"repo-search-bar\"\r\n    };\r\n  }\r\n\r\n  hideSearch = () => {\r\n    this.setState({ searchBarClass: \"repo-search-bar-hide\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Navbar className=\"nav-bar\" bg=\"light\" expand=\"lg\">\r\n          <Navbar.Brand>\r\n            <img className=\"git-nav-icn\" src={Gitlogo} alt={\"logo\"} />\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"mr-auto\">\r\n              <Nav.Link href=\"/\">Home</Nav.Link>\r\n              <Nav.Link href=\"/Favorits\">Favorites</Nav.Link>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n\r\n        <Router>\r\n          <Route\r\n            path=\"/\"\r\n            render={() => {\r\n              return (\r\n                <div className={this.state.searchBarClass}>\r\n                  <RepoSearchPage />\r\n                </div>\r\n              );\r\n            }}\r\n          />\r\n          <Route\r\n            path=\"/Favorits\"\r\n            render={() => {\r\n              return <FavoririteRepos oninit={this.hideSearch} />;\r\n            }}\r\n          />\r\n        </Router>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainApp;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport \"./style/Main.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport MainApp from \"./components/MainApp.jsx\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <MainApp></MainApp>\n    </React.Fragment>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}